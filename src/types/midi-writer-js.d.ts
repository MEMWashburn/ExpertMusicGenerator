/** Declaration file generated by dts-gen */
declare module 'midi-writer-js';

declare class NoteEvent {
    constructor(fields: any);

    buildData(): any;

}

declare class Track {
    constructor();

    addCopyright(text: any): any;

    addCuePoint(text: any): any;

    addEvent(events: any, mapFunction?: any): any;

    addInstrumentName(text: any): any;

    addLyric(text: any): any;

    addMarker(text: any): any;

    addText(text: any): any;

    addTrackName(text: any): any;

    buildData(): any;

    mergeExplicitTickEvents(): any;

    mergeSingleEvent(event: any): void;

    mergeTrack(track: any): any;

    polyModeOn(): any;

    removeEventsByType(eventType: any): any;

    setKeySignature(sf: any, mi: any): any;

    setTempo(bpm: any): any;

    setTimeSignature(numerator: any, denominator: any, midiclockspertick?: any, notespermidiclock?: any): any;

}

declare class VexFlow {
    constructor();

    convertDuration(note: any): any;

    convertPitch(pitch: any): any;

    trackFromVoice(voice: any): any;

}

declare class Writer {
    constructor(tracks: any);

    base64(): any;

    buildFile(): any;

    dataUri(): any;

    //saveMIDI(filename: any): void;

    stdout(): any;

}

declare const Constants: {
    CONTROLLER_CHANGE_STATUS: number;
    HEADER_CHUNK_DIVISION: number[];
    HEADER_CHUNK_FORMAT0: number[];
    HEADER_CHUNK_FORMAT1: number[];
    HEADER_CHUNK_LENGTH: number[];
    HEADER_CHUNK_TYPE: number[];
    META_COPYRIGHT_ID: number;
    META_CUE_POINT: number;
    META_END_OF_TRACK_ID: number[];
    META_EVENT_ID: number;
    META_INSTRUMENT_NAME_ID: number;
    META_KEY_SIGNATURE_ID: number;
    META_LYRIC_ID: number;
    META_MARKER_ID: number;
    META_SMTPE_OFFSET: number;
    META_TEMPO_ID: number;
    META_TEXT_ID: number;
    META_TIME_SIGNATURE_ID: number;
    META_TRACK_NAME_ID: number;
    PROGRAM_CHANGE_STATUS: number;
    TRACK_CHUNK_TYPE: number[];
    VERSION: string;
};

declare function ControllerChangeEvent(fields: any): void;

declare function ProgramChangeEvent(fields: any): void;

declare function Utils(): void;
